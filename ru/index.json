[{"authors":null,"categories":null,"content":"Варвара Кабанова родилась в городе Брянске в марте 2004 года. С самого малого возраста ей очень нравилось рисовать и разукрашивать все на своем пути. Окончила художественную школу, где много времени проводила, изучая графику и живопись. В 2021 году выпустилась из Гимназии №7, где обучалась в физико-математическом классе.\nНесмотря на столь большое различие в интересах, она сочетает в себе как творческое, так и техническое начало\n","date":1372636800,"expirydate":-62135596800,"kind":"term","lang":"ru","lastmod":1372636800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Варвара Кабанова родилась в городе Брянске в марте 2004 года. С самого малого возраста ей очень нравилось рисовать и разукрашивать все на своем пути. Окончила художественную школу, где много времени проводила, изучая графику и живопись.","tags":null,"title":"Варвара Кабанова","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://vdkabanova.github.io/ru/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/ru/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":null,"categories":null,"content":"Программирование — это процесс создания программ (программного обеспечения). Для этого программисты пишут исходный код на одном из языков программирования.\nСуществует более 300 языков программирования, но для успешной карьеры можно выбирать из десяти самых популярных. Еще правильнее будет сначала определиться с областью, в которой вы собираетесь работать, и только потом приступать к выбору языка.\nОдним из лучших языков для начинающих является Python. Этот популярный язык общего назначения хорош лаконичностью и простотой синтаксиса, его активно используют в IT-компаниях России и мира.\nДругими популярными языками считаются Java и C. Они сложнее, особенно для новичков, но владение ими обеспечивает лучшее понимание того, что вы делаете и что происходит с вашей программой. Вместе с языком Pascal язык С обычно изучается в вузе на профильных факультетах.\nИспользование других языков программирования зависит от цели деятельности. Например, в качестве серверных языков популярны php, Java, ruby. Из клиентских языков наиболее перспективен Java Script. Для разработки сложных высоконагруженных проектов требуется C++. На этом же языке пишутся игры. Еще одна перспективная сфера — разработка приложений для мобильных устройств. Тут используют Java, Objective-C, Swift. Любой опытный программист знает несколько языков, однако код на работе он пишет только на одном из них.\n","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653609600,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://vdkabanova.github.io/ru/project/example/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/ru/project/example/","section":"project","summary":"Какой язык программирования учить первым?","tags":["prog"],"title":"Программирование","type":"project"},{"authors":null,"categories":null,"content":"Python — это высокоуровневый язык программирования общего назначения, который используется в том числе и для разработки веб-приложений. Язык ориентирован на повышение производительности разработчика и читаемости кода.\nПравильное русское произношение названия языка программирования — Пайтон, но чаще используется искажённое — Питон.\nPython поддерживает несколько парадигм программирования: структурное, объектно-ориентированное, функциональное, императивное и аспектно-ориентированное. В языке присутствет динамическая типизация, автоматическое управление памятью, полная интроспекция, механизм обработки исключений, поддержка многопоточных вычислений и удобные высокоуровневые структуры данных. Программный код на Python организовывается в функции и классы, которые могут объединяться в модули, а они в свою очередь могут быть объединены в пакеты. Python обычно используется как интерпретируемый, но может быть скомпилирован в байт-код Java и в MSIL (в рамках платфоры .NET).\n","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653609600,"objectID":"495698671bd8409287525d32526b42aa","permalink":"https://vdkabanova.github.io/ru/project/example3/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/ru/project/example3/","section":"project","summary":"Введение","tags":["pithon"],"title":"Язык программирования ПИТОН","type":"project"},{"authors":null,"categories":null,"content":"C — это достаточно “древний” язык программирования, он сформировался в начале 70-х. Не смотря на это, C — живой язык в том смысле, что он активно применяется в настоящее время. Он был придуман, использовался и используется для написания частей программного кода Unix-подобных операционных систем. Также на нем пишут утилиты, компиляторы и реже прикладные программы. Поэтому C называют системным языком программирования.\nЕго живучесть можно объяснить тем, что принципы работы операционных систем относительно универсальны, они не подвержены тому прогрессу и разнообразию, которые можно наблюдать в среде десктопного и мобильного ПО, Web-приложений. C не является языком достаточно высокого уровня, он ближе к архитектуре компьютера. В результате программы на C получаются более быстрыми.\nC в чистом виде не поддерживает объектно-ориентированного программирования (хотя есть библиотека, в которой эмулируются возможности ООП). Поддержка ООП реализована в C++. Хотя последний возник на основе языка C, он не является его “продолжением”, а представляет собой отдельный язык, который можно изучать, не зная C. Однако изучение C полезно перед знакомством с его “продвинутым младшим братом”, т.к. синтаксис языков похож, C не перегружает мозг начинающего программиста сверхвозможностями и приучает к пониманию сути происходящего.\nПодходит ли C для первого знакомства с программированием? Если вы не обучаетесь в вузе по специальности, связанной с IT, то нет. C предполагает понимание организации и принципов работы аппаратного обеспечения, в частности – памяти. Здесь многое делается с помощью указателей, они играют ключевую роль; эта тема достаточно сложная для понимания и обычно не изучается в школе.\nКонечно, с помощью C можно изучать основы программирования и не изучать при этом указатели. Однако человек будет думать, что знает C, мало зная о нем по существу. Язык C был создан разбирающимися в устройстве «железа» профессиональными программистами для написания операционной системы UNIX. Его не задумывали как язык для обучения начинающих.\n","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653609600,"objectID":"1551ce708e26625310deb3a4c3e3ffec","permalink":"https://vdkabanova.github.io/ru/project/example2/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/ru/project/example2/","section":"project","summary":"Введение","tags":["c"],"title":"Язык программирования СИ","type":"project"},{"authors":["Варвара Кабанова"],"categories":[],"content":"Ингредиенты\n- 150 г песочного печенья; - 75 г сливочного масла; - 900 г сыра «Филадельфия»; - 200 г сахарной пудры; - 200 г сметаны жирностью 20%; - 3 столовые ложки муки; - 3 яйца; - 1 яичный желток; - щепотка ванилина.  Приготовление\nИзмельчите печенье в блендере, добавьте к нему растопленное масло и хорошо перемешайте. Ровным тонким слоем распределите смесь по дну формы диаметром 23 см и утрамбуйте. Выпекайте в разогретой до 180 °C духовке 10 минут. Затем вытащите и дайте основе остыть.\nТем временем смешайте сыр и сахарную пудру. Введите сметану и муку и перемешайте ещё раз. Поочерёдно добавьте по одному яйцу, желток и ванилин, перемешивая после каждого ингредиента до однородной консистенции.\nРавномерно распределите начинку по основе и выпекайте 45 минут при температуре 160 °C.\n","date":1651760453,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1651760453,"objectID":"0eab8df412fded1a34ee2f1563e8efb7","permalink":"https://vdkabanova.github.io/ru/post/post10/","publishdate":"2022-05-05T17:20:53+03:00","relpermalink":"/ru/post/post10/","section":"post","summary":"Ингредиенты\n- 150 г песочного печенья; - 75 г сливочного масла; - 900 г сыра «Филадельфия»; - 200 г сахарной пудры; - 200 г сметаны жирностью 20%; - 3 столовые ложки муки; - 3 яйца; - 1 яичный желток; - щепотка ванилина.","tags":[],"title":"Классический чизкейк","type":"post"},{"authors":["Варвара Кабанова"],"categories":[],"content":"Язык разметки с простым ненавязчивым синтаксисом\nA облегченный язык разметки (LML ), также называемый простым или гуманным языком разметки , представляет собой язык разметки с простым, ненавязчивым синтаксисом . Он разработан таким образом, чтобы его было легко писать с использованием любого общего и легко читать в необработанном виде. Облегченные языки разметки используются в приложениях, где может потребоваться прочитать необработанный документ, а также окончательный визуализированный вывод.\nНапример, человек, загружающий библиотеку программного обеспечения, может предпочесть читать документацию в текстовом редакторе, а не в веб-браузере. Еще одно приложение для таких языков - обеспечение ввода данных в веб-публикациях , таких как веб-журналы и вики , где интерфейс ввода представляет собой простой текстовое поле . Серверное программное обеспечение затем преобразует ввод в общий язык разметки документов , например HTML .\nИстория\nОблегченные языки разметки изначально использовались на текстовых дисплеях, которые не могли отображать символы, выделенные курсивом или жирный , поэтому пришлось разработать неформальные методы передачи этой информации. Этот выбор форматирования, естественно, был применен к обычным текстовым сообщениям электронной почты. Консольные браузеры также могут прибегать к аналогичным соглашениям об отображении.\nВ 1986 году международный стандарт SGML предоставил средства для определения и анализа облегченных языков разметки с использованием грамматик и импликации тегов. 1998 W3C XML - это профиль SGML, в котором эти возможности отсутствуют. Однако определение типа документа (DTD) SGML для любого из перечисленных ниже языков неизвестно.\nТипы\nЛегкие языки разметки можно разделить на категории по типам их тегов. Подобно HTML (полужирный ), в некоторых языках используются именованные элементы, которые имеют общий формат для начальных и конечных тегов (например, BBCode[b] жирный [ / b] ), тогда как правильные упрощенные языки разметки ограничены ASCII -только знаками препинания и другими небуквенными символами для тегов, но некоторые также смешивают оба стиля (например, Textile bq. ) или разрешить встроенный HTML (например, Markdown ), возможно, расширенный пользовательскими элементами (например, MediaWiki source ).\nБольшинство языков различают разметку для строк или блоков и для более коротких отрезков текста, но некоторые поддерживают только встроенную разметку.\nНекоторые языки разметки предназначены для определенной цели, например, для документирования компьютерного кода (например, POD , RD) или для преобразования в определенный выходной формат (обычно HTML) и ничего больше, другие более вообще в приложении. Сюда входит, ориентированы ли они на текстовое представление или на сериализацию данных.\nЯзыки, ориентированные на представление, включают AsciiDoc , atx , BBCode, креольский , Crossmark, Epytext , Haml , JsonML , MakeDoc , Markdown, Org-mode , POD, reST , RD, Setext , SiSU , SPIP , Xupl , Texy! , Текстиль , txt2tags , UDO и Wikitext .\nЯзыки, ориентированные на сериализацию данных, включают Curl (гомоиконный, но также читает JSON; каждый объект сериализуется), JSON и YAML .\n","date":1651760453,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1651760453,"objectID":"122591be03ff19b49a97c0378f58bb18","permalink":"https://vdkabanova.github.io/ru/post/post4/","publishdate":"2022-05-05T17:20:53+03:00","relpermalink":"/ru/post/post4/","section":"post","summary":"Язык разметки с простым ненавязчивым синтаксисом\nA облегченный язык разметки (LML ), также называемый простым или гуманным языком разметки , представляет собой язык разметки с простым, ненавязчивым синтаксисом . Он разработан таким образом, чтобы его было легко писать с использованием любого общего и легко читать в необработанном виде.","tags":[],"title":"Легковесные языки разметки","type":"post"},{"authors":["Варвара Кабанова"],"categories":[],"content":"Вступление\nМаленький рецепт, который будет полезен при создании динамических отчетов.\nДостаточно часто встречается ситуация, когда размер и содержание отчетной формы будет зависеть от состава переданных на вход данных. Речь идет именно о story-telling отчете, а не о простом выводе таблицы. В этом случае, в зависимости от содержания входных данных, могут появляться или исчезать отдельные пункты, графики, таблицы, текст.\nЧто будет делать классический Excel-Word аналитик? Под каждый новый запрос делать кастомный отчет и сохранять его в отдельный файл. Но можно заглянуть немного под капот и заставить компьютер делать все самостоятельно.\nR Markdown позволяет все это выполнить в элегантной форме. Некоторые технические детали ниже.\nОсновная идея\nУ нас есть данные, содержание которых может меняться. Например, надо строить отчет по машинам, развозящим грузы (пример абстрактный). Количество и номера машин, выходящих в рейс, каждый день разные, но сводка по каждой машине по своей структуре одинакова. Будем отталкиваться от этого.\nR Markdown выполняется в несколько проходов. При этом из Rmd сначала формируется .md, а потом из него формируется выходное представление, наиболее популярным является html формат.\nИтого, намечаются 2 варианта.\n  Можно на этапе компиляции отчета вставить в компилируемый .Rmd нужные блоки (собранные или шаблонизированные).\n  Можно на этапе компиляции отчета вставить в промежуточный .md нужные markdown вставки.\n  Реализация\nНиже просто пример кода, который каждый желающий может запустить у себя на машине. Он охватывает реализации обоих примеров и минимален, чтобы передать суть.\n  Динамически вставляем гиперссылки, получаемые из внешнего источника.\n  Динамически формируем разделы документов на основании данных.\n  ","date":1651760453,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1651760453,"objectID":"53a087908899411dab3858677c03ade5","permalink":"https://vdkabanova.github.io/ru/post/post6/","publishdate":"2022-05-05T17:20:53+03:00","relpermalink":"/ru/post/post6/","section":"post","summary":"Вступление\nМаленький рецепт, который будет полезен при создании динамических отчетов.\nДостаточно часто встречается ситуация, когда размер и содержание отчетной формы будет зависеть от состава переданных на вход данных. Речь идет именно о story-telling отчете, а не о простом выводе таблицы.","tags":[],"title":"Создание отчета","type":"post"},{"authors":["Варвара Кабанова"],"categories":[],"content":"Что такое «система контроля версий» и почему это важно?\nСистема управления версиями (Version Control System, VCS) — это программное обеспечение для облегчения работы с изменяющейся информацией. Система управления версиями позволяет хранить несколько версий одного и того же документа, при необходимости возвращаться к более ранним версиям, определять, кто и когда сделал то или иное изменение, и многое другое. Такие системы наиболее широко используются при разработке программного обеспечения для хранения исходных кодов разрабатываемой программы.\nGIT — распределённая система управления версиями, созданная Линусом Торвальдсом для управления разработкой ядра Linux и в настоящее время получившая очень широкое распространение в среде разработчиков программного обеспечения.\nВ GIT используется распределённая модель вместо традиционной клиент-серверной. Таким образом, репозитории GIT не нуждаются в централизованном хранилище: вся история изменения документов хранится на каждом компьютере, в локальном хранилище, и при необходимости отдельные фрагменты истории локального хранилища синхронизируются с аналогичным хранилищем на другом компьютере.\nНа сегодняшний день, GIT стал стандартной системой управления версиями для очень многих разработчиков, а хостинг исходных кодов GitHub — самым крупным подобным сервисом. Примерами проектов, использующих Git, являются ядро Linux, Android, Ruby on Rails, Drupal, Wine, Chromium, Compiz Fusion, jQuery, PHP, MediaWiki и некоторые дистрибутивы Linux\nЗачем новичку учить Git?\nGit используется в большинстве компаний, где над проектом работает хотя бы два разработчика:\n Новый человек приходит в компанию и клонирует репозиторий проекта на ПК. Получает задачу, создаёт новую ветку и пишет код. Когда всё готово — отправляет запрос на добавление кода в master-ветку. Другие разработчики смотрят код, оставляют комментарии и указывают на ошибки. Новичок дорабатывает код, обновляет master-ветку и переходит к следующей задаче.  Это общая схема того, как проходит командная работа в проекте. В ней не учтены правила использования Git, которые каждая команда пишет под себя. Например, у каждой команды свой порядок проверки кода и свои критерии его готовности для добавления в master-ветку.\nЗнание Git и знание правил использования Git в команде — это два разных навыка, которые можно сравнить с умением ездить на автомобиле и знанием правил дорожного движения. Если умеете управлять автомобилем — вам проще сконцентрироваться и быстро выучить правила. С Git аналогичная ситуация: если вы умеете управлять системой контроля версий, то можете сразу влиться в проект, не отвлекаться на второстепенные вещи и сосредоточиться на качестве кода.\n","date":1651760453,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1651760453,"objectID":"0c6f6cbe96ac9b1239a629e09477d6d1","permalink":"https://vdkabanova.github.io/ru/post/post2/","publishdate":"2022-05-05T17:20:53+03:00","relpermalink":"/ru/post/post2/","section":"post","summary":"Что такое «система контроля версий» и почему это важно?\nСистема управления версиями (Version Control System, VCS) — это программное обеспечение для облегчения работы с изменяющейся информацией. Система управления версиями позволяет хранить несколько версий одного и того же документа, при необходимости возвращаться к более ранним версиям, определять, кто и когда сделал то или иное изменение, и многое другое.","tags":[],"title":"Управление версиями. Git","type":"post"},{"authors":["Варвара Кабанова"],"categories":[],"content":"Программирование в науке: актуальность и востребованность\nПрограммирование часто упоминают в прикладном контексте. Кажется, с его помощью создают только мобильные приложения, интернет-системы и спецэффекты для кино. Но первоначально программирование предназначалось для решения научных задач. Кроме того, программирование само — наука, узнать о которой будет полезно тем, кто решил связать карьеру с компьютерной разработкой.\nОбщая информация\nНаучное программирование — высокоориентированный стиль программирования для научных расчетов. От других видов программирования его отличают предельные корректность и стабильность конечного продукта, строгое разделение научной и интерфейсной частей, индивидуальность алгоритмов, а также преобладание эффективности над универсальностью.\nНаучное программирование лежит в основе любого современного глобального исследования. Все передовые технологии — от квантовых компьютеров до космических программ — были бы невозможны без специалистов в области научного программирования, способных предоставить ученым надежный и точный инструмент для совершения открытий.\nРяд отраслей науки непосредственно зависят от уровня развития научного программирования. Так, своего исполнения ждут беспилотный транспорт, «умные» системы управления городским и сельским хозяйством, фондовыми биржами; ждут робототехника, генная инженерия, искусственный интеллект, превосходящий возможности человека.\nСпециализация\nУченые используют различные языки программирования, выбор которых зависит от типа задачи и предпочтений автора. Исторически первым высокоуровневым языком программирования является Fortran, на нем написано много отлаженных библиотек математической статистики и библиотек для решения дифференциальных уравнений, что актуально для экономики и биологии соответственно.\nБолее простым синтаксисом обладает Python, также подходящий для программирования математических вычислений. Язык Python привлекается для обработки данных в математике, физике, экономике, биологии, химии и умеет работать с некоторыми другими «научными» языками: Fortran, C++, C#.\nВ свою очередь C# позволяет программировать на платформе .NET, адаптировать программу к общеязыковой исполняющей среде (CLR) и ускорить разработку в рамках оперативных научных сессий.\nБудущее профессии программист-ученый\nПрограммирование двигает науку, которая двигает технический прогресс. Изобретения, которые считались революционными вчера, в XXI веке служат бытовым потребностям: СВЧ-печь, мобильный телефон, 8-битная домашняя ЭВМ. От программиста-ученого зависит, каких вершин достигнет наука сегодня и какие из них завтра войдут в каждый дом.\nВ руках программиста-ученого находятся инструменты не только для развития промышленности, но и для повышения общего качества жизни. Такой специалист увеличивает прогностическую функцию человечества, помогая предугадывать и предотвращать климатические, финансовые, гуманитарные катастрофы.\nГде научиться программированию?\nОсвоить программирование можно как и где угодно. Специализированная литература, очное обучение, интернет-площадки — все эти ресурсы способны обеспечить начинающего программиста базой знаний, достаточной для самостоятельного творчества и повышения квалификации, в том числе в русле научной разработки.\nПортал GeekBrains предлагает пользователям бесплатные курсы для новичков в программировании. Дополнительно проводится подготовка по 15 профессиям, наиболее востребованным на рынке труда: программист Python, разработчик C#, Senior Web Developer и другие. По завершении каждого курса выпускникам гарантируется стажировка от GeekBrains\n","date":1651760453,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1651760453,"objectID":"eff061ee8a24f8f74005b0514c080a17","permalink":"https://vdkabanova.github.io/ru/post/post8/","publishdate":"2022-05-05T17:20:53+03:00","relpermalink":"/ru/post/post8/","section":"post","summary":"Программирование в науке: актуальность и востребованность\nПрограммирование часто упоминают в прикладном контексте. Кажется, с его помощью создают только мобильные приложения, интернет-системы и спецэффекты для кино. Но первоначально программирование предназначалось для решения научных задач.","tags":[],"title":"Языки научного программирования","type":"post"},{"authors":["Варвара Кабанова"],"categories":["блог"],"content":"На прошлой неделе я выполнила две лабораторные работы (№3, №4) по операционным системам, сделала первую часть индивидуального проекта. Съездила к родителям в родной город.\n","date":1651758667,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1651758667,"objectID":"fe859c6266641600992fd6a0d6f11947","permalink":"https://vdkabanova.github.io/ru/post/post1/","publishdate":"2022-05-05T16:51:07+03:00","relpermalink":"/ru/post/post1/","section":"post","summary":"На прошлой неделе я выполнила две лабораторные работы (№3, №4) по операционным системам, сделала первую часть индивидуального проекта. Съездила к родителям в родной город.","tags":["каждая неделя"],"title":"Блог 05/05","type":"post"},{"authors":["Варвара Кабанова"],"categories":["блог"],"content":"На прошлой неделе я выполнила две лабораторные работы (№5, №6) по операционным системам, сделала вторую часть индивидуального проекта. Устроилась на работу, снимала хоккейный матч мирэа-рудн\n","date":1651758667,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1651758667,"objectID":"d084acea3d1051f530a6486b095c70b4","permalink":"https://vdkabanova.github.io/ru/post/post3/","publishdate":"2022-05-05T16:51:07+03:00","relpermalink":"/ru/post/post3/","section":"post","summary":"На прошлой неделе я выполнила две лабораторные работы (№5, №6) по операционным системам, сделала вторую часть индивидуального проекта. Устроилась на работу, снимала хоккейный матч мирэа-рудн","tags":["каждая неделя"],"title":"Блог 12/05","type":"post"},{"authors":["Варвара Кабанова"],"categories":["блог"],"content":"На прошлой неделе я выполнила две лабораторные работы (№7, №8) по операционным системам, устроилась на работу\n","date":1651758667,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1651758667,"objectID":"918c2ae645793b070e27ace951359a94","permalink":"https://vdkabanova.github.io/ru/post/post5/","publishdate":"2022-05-05T16:51:07+03:00","relpermalink":"/ru/post/post5/","section":"post","summary":"На прошлой неделе я выполнила две лабораторные работы (№7, №8) по операционным системам, устроилась на работу","tags":["каждая неделя"],"title":"Блог 19/05","type":"post"},{"authors":["Варвара Кабанова"],"categories":["блог"],"content":"На прошлой неделе я выполнила две лабораторные работы (№9, №10) по операционным системам, cходила в большой и малый театр\n","date":1651758667,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1651758667,"objectID":"0f37a544ce2716192b081086f7f67b23","permalink":"https://vdkabanova.github.io/ru/post/post7/","publishdate":"2022-05-05T16:51:07+03:00","relpermalink":"/ru/post/post7/","section":"post","summary":"На прошлой неделе я выполнила две лабораторные работы (№9, №10) по операционным системам, cходила в большой и малый театр","tags":["каждая неделя"],"title":"Блог 27/05","type":"post"},{"authors":["Варвара Кабанова"],"categories":["блог"],"content":"На прошлой неделе я выполнила две лабораторные работы (№11, №12) по операционным системам, cнимала хоккейный матч рудн-гуу\n","date":1651758667,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1651758667,"objectID":"6b14675d44e331e53c790a5322187755","permalink":"https://vdkabanova.github.io/ru/post/post9/","publishdate":"2022-05-05T16:51:07+03:00","relpermalink":"/ru/post/post9/","section":"post","summary":"На прошлой неделе я выполнила две лабораторные работы (№11, №12) по операционным системам, cнимала хоккейный матч рудн-гуу","tags":["каждая неделя"],"title":"Блог 3/06","type":"post"},{"authors":[],"categories":[],"content":"Определение Программирование — это процесс создания программ (программного обеспечения). Для этого программисты пишут исходный код на одном из языков программирования.\n Сколько всего языков? Существует более 300 языков программирования, но для успешной карьеры можно выбирать из десяти самых популярных. Еще правильнее будет сначала определиться с областью, в которой вы собираетесь работать, и только потом приступать к выбору языка.\n ПИТОН Одним из лучших языков для начинающих является Python. Этот популярный язык общего назначения хорош лаконичностью и простотой синтаксиса, его активно используют в IT-компаниях России и мира.\n JAVA, Pascal и C Другими популярными языками считаются Java и C. Они сложнее, особенно для новичков, но владение ими обеспечивает лучшее понимание того, что вы делаете и что происходит с вашей программой. Вместе с языком Pascal язык С обычно изучается в вузе на профильных факультетах.\n Выберите цель деятельности Использование других языков программирования зависит от цели деятельности. Например, в качестве серверных языков популярны php, Java, ruby. Из клиентских языков наиболее перспективен Java Script. Для разработки сложных высоконагруженных проектов требуется C++. На этом же языке пишутся игры.\n. Еще одна перспективная сфера — разработка приложений для мобильных устройств. Тут используют Java, Objective-C, Swift. Любой опытный программист знает несколько языков, однако код на работе он пишет только на одном из них.\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://vdkabanova.github.io/ru/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/ru/slides/example/","section":"slides","summary":"Какой язык программирования учить первым?","tags":[],"title":"Программирование","type":"slides"},{"authors":["Варвара Кабанова","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1372636800,"objectID":"ff6a19061a984819d30c916886db56ef","permalink":"https://vdkabanova.github.io/ru/publication/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/ru/publication/example/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"}]